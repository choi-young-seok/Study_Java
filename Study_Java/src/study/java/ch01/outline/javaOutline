# Java :  SUN사에서 95년 발표한 프로그래밍 언어
	- 99년 폭발적인 인터넷 사용으로 인해 웹 어플리케이션 구축에 적합한 JAVA 급부상

# Java의 특징
	1. 높은 이식성 : 서로 다른 실행 환경을 가진 시스템 간에 프록그램을 옮겨 실행할 수 있는 것
		- JRE(Java Runtime Environment)이 설치되어 있는 모든 운영체제에서 실행가능
			- .java로 작성된 class파일을 컴파일 하여 바이트 코드로 이루어진 .class파일은
			  인터프리터에 의해 JRE가 설치된 모든 운영체제에서 실행 가능하다.
	
	2. 객체 지향 언어 : OOP
		- 객체 위주의 프로그램 설계
			- 프로그램을 구성하는 단위를 독립적으로 분할하며 분할된 부품(객체)을 조립하며 프로그램을 작성
		- 객체 지향 언어가 가져야할 캡슐화, 상속, 다형성 기능을 제공
	
	3. 함수적 스타일 코딩 지원
		- 함수적 프로그래밍 : 대용량 데이터의 병렬처리, 이벤트 지향 프로그래밍에 적합
		- Java는 함수적 프로그래밍을 위해 JDK 1.8부터 람다식을 지원
			- 람다식 : 컬렉션의 요소를 필터링, 매핑, 집계하는데 용이, 간결한 코드 작성 가능
			
	4. 메모리 관리(Garbage Collector)
		- C++은 메모리에 생성된 객체를 제거하기 위한 코드를 직접 작성해야 한다.
		- Java는 개발자가 아닌 Garbage Collector가 메모리를 관리
			- 객체 생성 시 자동적으로 메모리 영역을 찾아 할당, 해당 객체의 사용정도에 따라 메모리에서 객체 제거
			
	5. 다양한 어플리케이션 개발 가능
		- 윈도우, 리눅스, 유닉스, 맥 등의 JDK가 설치되었다면 다양한 OS에서 실행되는 프로그램 개발 가능
		
	6. Multi Thread 구현이 용이
		- 하나의 프로그램이 동시에 여러가지 작업을 처리해야 할 경우와 대용량 작업을 빨리 처리하기 위해
		  서브 작업으로 분리해서 병렬처리 하려면 Multi Thread 프로그래밍이 필요 : EX) batch(데이터 일괄처리) 등.
		- 프로그램이 실행되는 OS에 따라 멀티쓰레드를 구현하는 방법이 다르지만, 
		  Java는 Thread 생성 및 제어와 관련된 라이버러리 API를 제공하고 있어 OS에 상관없이 Multi Thread를 쉽게 구현 가능 
	
	7. 동적 로딩 지원 : Dynamic Loading
		- Java Application은 여러 객체가 서로 연결되어 실행되며, 이 객체들은 클래스로부터 생성된다.
		- Application이 실행될 때 모든 객체가 생성되지 않고, 객체가 필요한 시점에 클래스를 동적 로딩해서 객체를 생성
		- 개발 완료 후 유지/보수가 필요한 시점에도 해당 Class만 수정하면 되므로 전체 Application을 재 컴파일 할 필요가 없다.
			-> 시스템 오픈 후 운영업무에서 빠른 유지/보수가 가능
	
# Java Program의 실행 과정
	1. .java 파일 작성 : 소스코드 작성
	2. 컴파일러(javac.exe)를 통해 작성한 소스코드 컴파일 
		- 컴파일 결과 .class의 바이트 코드 파일 생성
	3. JVM 구동 명령어(java.exe)에 의해 컴파일된 .class파일 해석 및 기계어로 번역
		-> 인터프리터(JVM) 번역 시 OS에 따라 각기 다른 기계어로 번역
		
# Java SE : Java Standard Edition (Java 기본에디션)
	- Java 프로그램들이 공통적으로 사용하는 JVM을 비롯, Java 프로그램 개발에 필수적인 도구와 라이브러리 API를 정의
	- JDK : Java SE의 구현체 (Java Development Kit)
		- 컴파일러(javac.exe), 구동 명령어(java.exe)포함
	
# Java EE : Java Enterprise Edition (서버용 어플리케이션 개발 에디션)
	- 분산환경(네트워크, 인터넷)에서 어플리케이션을 개발하기 위한 도구 및 라이브러리 API를 정의
	
# Java 설치 : JDK/JRE
	- https://blog.naver.com/rcn115/221038301658
	
# Java 환경변수 설정
	- https://blog.naver.com/rcn115/221038303815